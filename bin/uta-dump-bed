#!/usr/bin/env python3
"""dump transcripts in UTA as a bed file"""

import argparse
import os
import pathlib
import sys
import operator

import psycopg2.extras
from bioutils.accessions import prepend_chr
from bioutils.assemblies import get_assembly


def parse_args(argv):
    ap = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    ap.add_argument(
        "--assembly", "-a",
        required=True,
        choices=["GRCh37", "GRCh38"])
    ap.add_argument(
        "--method",
        "-m",
        required=True,
        choices=["splign", "blat", "genebuild"],
        help="filter transcripts by this alignment method",
    )
    ap.add_argument(
        "--gene-list",
        "-G",
        type=pathlib.Path,
        required=False,
        default=None)
    ap.add_argument(
        "--schema",
        default="uta_20210129",
    )
    opts = ap.parse_args()
    return opts



if __name__ == "__main__":
    opts = parse_args(sys.argv[1:])

    NC_to_chr = {
        s['refseq_ac']: str(s['name'])
        for s in get_assembly(opts.assembly)['sequences']
        if s['refseq_ac'].startswith('NC_')
        }

    conn = psycopg2.connect(
        "host=uta.biocommons.org dbname=uta user=anonymous password=anonymous")
    cur = conn.cursor(cursor_factory=psycopg2.extras.NamedTupleCursor)
    query = """
	SELECT ESS.*,T.cds_start_i,T.cds_end_i
	FROM {opts.schema}.tx_exon_set_summary_mv ESS
	JOIN {opts.schema}.transcript T ON ESS.tx_ac=T.ac
	WHERE tx_ac ~ '^NM_' AND alt_ac ~ '^NC_0000' AND alt_aln_method = %s
        """
    if opts.gene_list:
        genes = [f"'{g.strip()}'" for g in open(opts.gene_list).read().split()]
        query += f""" AND ESS.hgnc in ({",".join(genes)})"""
    query += """ ORDER by alt_ac, se_i
	"""

    cur.execute(query.format(opts=opts), [opts.method])

    # records like this:
    # ─[ RECORD 1 ]───┬─────────────────────────────────────
    # │ hgnc           │ AADACL4
    # │ cds_md5        │ 097bd8cb1bf4ab7d4064945d27658bea
    # │ es_fingerprint │ 898c4481f19d80581235dde7de574d5d
    # │ tx_ac          │ NM_001013630.1
    # │ alt_ac         │ NC_000001.10
    # │ alt_aln_method │ splign
    # │ alt_strand     │ 1
    # │ exon_set_id    │ 190312
    # │ n_exons        │ 4
    # │ se_i           │ 12704565,12704733;12711141,12711358;12721801,12721865;12725971,12727097
    # │ starts_i       │ {12704565,12711141,12721801,12725971}
    # │ ends_i         │ {12704733,12711358,12721865,12727097}
    # │ lengths        │ {168,217,64,1126}
    # │ cds_start_i    │ 0
    # │ cds_end_i      │ 1224

    print(
        '#gffTags\ntrack name={opts.schema}_{opts.assembly}_{opts.method} type=bedDetail description="{opts.method} alignments from UTA ({opts.schema}) visibility=3"'
        .format(opts=opts))

    for row in cur:

        # primary assembly contigs only
        if row.alt_ac not in NC_to_chr:
            continue

        chrom_starts = sorted(row.starts_i)

        # chrom_start and chrom_end are the min,max of transcript bounds
        chrom_start = chrom_starts[0]
        chrom_end = sorted(row.ends_i)[-1]

        block_starts = [s - chrom_starts[0] for s in chrom_starts]

        block_sizes = list(row.lengths)
        if row.alt_strand == -1:
            block_sizes.reverse()

        # TODO: Use CDS start,end in genomic coordinates when reliable
        # (i.e., after indel-aware alignment)
        thick_start = chrom_start
        thick_end = chrom_end

        print("\t".join([
            prepend_chr(NC_to_chr[row.alt_ac]),  # chrom "chr.."
            str(chrom_start),
            str(chrom_end),
            f"{row.hgnc}/{row.tx_ac}",           # name
            "0",                                 # score
            "+" if row.alt_strand == 1 else "-", # strand
            str(thick_start),                    # thickStart
            str(thick_end),                      # thickEnd
            "0",                                 # itemRgb
            str(len(block_starts)),              # blockCount
            ",".join(map(str, block_sizes)) + ",",
            ",".join(map(str, block_starts)) + ",",
        ]))
