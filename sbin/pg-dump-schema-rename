#!/usr/bin/env python

"""Change the schema name of a postgresql dump

Example::

$ pg_dump -n schemaA | pg-dump-schema-rename schemaA schemaB | psql 

This technique uses a reverse-engineered notion of the dump syntax
in order to minimize the number of false replacements.  It is not
bulletproof. It is likely that there are schema constructs that were
not covered in my reverse engineering (e.g., CREATE TYPE).

For simplicity, all resulting schema names are quoted (not
conditionally quoted as in the pg_dump output).

Real world uses::

$ gzip -cdq dumps/uta_20140210.pgd.gz | ../sbin/pg-dump-schema-rename uta_20140210 uta1 | psql -U uta_admin -d uta_dev 2>&1 | tee log

$ pg_dump -U uta_admin -d uta_dev -n uta1 | ../sbin/pg-dump-schema-rename uta1 uta_20150602 | gzip -c >|uta_20150602.pgd.gz

"""

import logging
import re
import sys


if __name__ == "__main__":
    logging.basicConfig(level=logging.WARN)
    logger = logging.getLogger(__name__)

    old_schema = sys.argv[1]
    new_schema = sys.argv[2]
    for line in sys.stdin:
        line = line.rstrip()
        line = line.replace(old_schema, new_schema)

        if old_schema in line:
            # If this happens, it 
            raise Exception("{os} in line after replacements\n{line}".format(os=old_schema, line=line))

        print(line)
